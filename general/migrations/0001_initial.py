# Generated by Django 2.0.4 on 2018-04-16 23:12

from django.db import migrations, models
import django.db.models.deletion
import general.blocks.image
import general.blocks.markdown
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks
import wagtail.search.index
import wagtail.snippets.blocks
import wagtailstreamforms.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0019_delete_filter'),
        ('wagtaildocs', '0007_merge'),
        ('wagtailcore', '0040_page_draft_title'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasicPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('template_string', models.CharField(choices=[('general/basic.html', 'Basic Template')], max_length=255, verbose_name='Template')),
                ('feed_image', models.ForeignKey(blank=True, help_text='An image that can be used to promote this page', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BasicPageCarouselItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_external', models.URLField(blank=True, verbose_name='External link')),
                ('link_text', models.CharField(blank=True, help_text='Provide the text to use for an external link, or override the internal link text.', max_length=255, null=True)),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('link_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BasicPageSectionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('content', wagtail.core.fields.StreamField((('heading', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock()), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('h1', 'h1'), ('h2', 'h2'), ('h3', 'h3'), ('h4', 'h4'), ('h5', 'h5')]))))), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('markdown', general.blocks.markdown.MarkDownBlock(rows=10)), ('image', wagtail.core.blocks.StructBlock((('image', wagtail.images.blocks.ImageChooserBlock()), ('alignment', general.blocks.image.ImageFormatChoiceBlock())))), ('pullquote', wagtail.core.blocks.StructBlock((('quote', wagtail.core.blocks.RichTextBlock(required=True)), ('cite', wagtail.core.blocks.CharBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('form', wagtail.core.blocks.StructBlock((('form', wagtailstreamforms.blocks.FormChooserBlock()), ('form_action', wagtail.core.blocks.CharBlock(help_text='The form post action. "" or "." for the current page or a url', required=False)), ('form_reference', wagtailstreamforms.blocks.InfoBlock(help_text='This form will be given a unique reference once saved', required=False))))), ('link', wagtail.core.blocks.StructBlock((('external_link', wagtail.core.blocks.URLBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)), ('text', wagtail.core.blocks.CharBlock(required=False)), ('button_style', wagtail.core.blocks.ChoiceBlock(choices=[('button', 'Default'), ('button button-primary', 'Primary'), ('button button-secondary', 'Secondary')], required=False))))), ('custom_content', wagtail.snippets.blocks.SnippetChooserBlock('general.CustomContent')), ('card_list', wagtail.core.blocks.StructBlock((('cards', wagtail.core.blocks.ListBlock(wagtail.snippets.blocks.SnippetChooserBlock('general.Card'))),))), ('two_column', wagtail.core.blocks.StructBlock((('content', wagtail.snippets.blocks.SnippetChooserBlock('general.TwoColumn')),)))), blank=True, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('image_placement', models.CharField(blank=True, choices=[('top', 'Top'), ('bottom', 'Bottom')], max_length=10, null=True, verbose_name='Placement')),
                ('content', wagtail.core.fields.StreamField((('heading', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock()), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('h1', 'h1'), ('h2', 'h2'), ('h3', 'h3'), ('h4', 'h4'), ('h5', 'h5')]))))), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('markdown', general.blocks.markdown.MarkDownBlock(rows=10)), ('link', wagtail.core.blocks.StructBlock((('external_link', wagtail.core.blocks.URLBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)), ('text', wagtail.core.blocks.CharBlock(required=False)), ('button_style', wagtail.core.blocks.ChoiceBlock(choices=[('button', 'Default'), ('button button-primary', 'Primary'), ('button button-secondary', 'Secondary')], required=False)))))))),
            ],
            options={
                'verbose_name': 'card',
                'ordering': ['title'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='CustomContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('body', wagtail.core.fields.StreamField((('heading', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock()), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('h1', 'h1'), ('h2', 'h2'), ('h3', 'h3'), ('h4', 'h4'), ('h5', 'h5')]))))), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('markdown', general.blocks.markdown.MarkDownBlock(rows=10)), ('html', wagtail.core.blocks.RawHTMLBlock()), ('image', wagtail.core.blocks.StructBlock((('image', wagtail.images.blocks.ImageChooserBlock()), ('alignment', general.blocks.image.ImageFormatChoiceBlock())))), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('pullquote', wagtail.core.blocks.StructBlock((('quote', wagtail.core.blocks.RichTextBlock(required=True)), ('cite', wagtail.core.blocks.CharBlock(required=False))))), ('embed', wagtail.embeds.blocks.EmbedBlock()), ('two_column', wagtail.core.blocks.StructBlock((('content', wagtail.snippets.blocks.SnippetChooserBlock('general.TwoColumn')),)))), blank=True, null=True)),
            ],
            options={
                'verbose_name': 'custom content module',
                'ordering': ['title'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='For internal reference only.', max_length=255, unique=True)),
                ('slug', models.SlugField(help_text='Used to reference this menu in templates etc. Must be unique.', max_length=255, unique=True)),
                ('heading', models.CharField(blank=True, help_text='If supplied, appears above the menu when rendered.', max_length=255, null=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='MenuMenuItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_external', models.URLField(blank=True, verbose_name='External link')),
                ('link_text', models.CharField(blank=True, help_text='Provide the text to use for an external link, or override the internal link text.', max_length=255, null=True)),
                ('url_append', models.CharField(blank=True, help_text="Use this to optionally append a #hash or querystring to the above page's URL.", max_length=255, null=True)),
                ('css_class', models.CharField(blank=True, help_text='Specify additional css classes.', max_length=255, null=True)),
                ('link_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PagePlaceholder',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('disclaimer', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PageRedirection',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('redirect_to_page', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('css_class', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='StyleCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='TwoColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('left_content', wagtail.core.fields.StreamField((('heading', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock()), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('h1', 'h1'), ('h2', 'h2'), ('h3', 'h3'), ('h4', 'h4'), ('h5', 'h5')]))))), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('markdown', general.blocks.markdown.MarkDownBlock(rows=10)), ('image', wagtail.core.blocks.StructBlock((('image', wagtail.images.blocks.ImageChooserBlock()), ('alignment', general.blocks.image.ImageFormatChoiceBlock())))), ('link', wagtail.core.blocks.StructBlock((('external_link', wagtail.core.blocks.URLBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)), ('text', wagtail.core.blocks.CharBlock(required=False)), ('button_style', wagtail.core.blocks.ChoiceBlock(choices=[('button', 'Default'), ('button button-primary', 'Primary'), ('button button-secondary', 'Secondary')], required=False)))))))),
                ('right_content', wagtail.core.fields.StreamField((('heading', wagtail.core.blocks.StructBlock((('heading', wagtail.core.blocks.CharBlock()), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('h1', 'h1'), ('h2', 'h2'), ('h3', 'h3'), ('h4', 'h4'), ('h5', 'h5')]))))), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('markdown', general.blocks.markdown.MarkDownBlock(rows=10)), ('image', wagtail.core.blocks.StructBlock((('image', wagtail.images.blocks.ImageChooserBlock()), ('alignment', general.blocks.image.ImageFormatChoiceBlock())))), ('link', wagtail.core.blocks.StructBlock((('external_link', wagtail.core.blocks.URLBlock(required=False)), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('document', wagtail.documents.blocks.DocumentChooserBlock(required=False)), ('text', wagtail.core.blocks.CharBlock(required=False)), ('button_style', wagtail.core.blocks.ChoiceBlock(choices=[('button', 'Default'), ('button button-primary', 'Primary'), ('button button-secondary', 'Secondary')], required=False)))))))),
            ],
            options={
                'verbose_name': 'two column content',
                'ordering': ['title'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.AddField(
            model_name='style',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='general.StyleCategory'),
        ),
        migrations.AddField(
            model_name='menumenuitem',
            name='link_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='menumenuitem',
            name='menu',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='general.Menu'),
        ),
        migrations.AddField(
            model_name='card',
            name='content_alignment',
            field=models.ForeignKey(limit_choices_to={'category__title': 'TextAlignment'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style', verbose_name='Alignment'),
        ),
        migrations.AddField(
            model_name='card',
            name='content_background',
            field=models.ForeignKey(help_text='The content background colour.', limit_choices_to={'category__title': 'BackgroundColour'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style', verbose_name='Background'),
        ),
        migrations.AddField(
            model_name='card',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
        migrations.AddField(
            model_name='card',
            name='text_colour',
            field=models.ForeignKey(help_text='The text colour of the content.', limit_choices_to={'category__title': 'TextColour'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style'),
        ),
        migrations.AddField(
            model_name='basicpagesectionitem',
            name='background',
            field=models.ForeignKey(help_text='The background colour.', limit_choices_to={'category__title': 'BackgroundColour'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style'),
        ),
        migrations.AddField(
            model_name='basicpagesectionitem',
            name='background_width',
            field=models.ForeignKey(help_text='The area to cover the background.', limit_choices_to={'category__title': 'BackgroundWidth'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style'),
        ),
        migrations.AddField(
            model_name='basicpagesectionitem',
            name='content_width',
            field=models.ForeignKey(help_text='The width of the content.', limit_choices_to={'category__title': 'ContainerWidth'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style'),
        ),
        migrations.AddField(
            model_name='basicpagesectionitem',
            name='horizontal_padding',
            field=models.ForeignKey(help_text='The horizontal space between set content_width and the content.', limit_choices_to={'category__title': 'HorizontalPadding'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style'),
        ),
        migrations.AddField(
            model_name='basicpagesectionitem',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='general.BasicPage'),
        ),
        migrations.AddField(
            model_name='basicpagesectionitem',
            name='text_alignment',
            field=models.ForeignKey(help_text='The text alignment of the content.', limit_choices_to={'category__title': 'TextAlignment'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style'),
        ),
        migrations.AddField(
            model_name='basicpagesectionitem',
            name='text_colour',
            field=models.ForeignKey(help_text='The text colour of the content.', limit_choices_to={'category__title': 'TextColour'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style'),
        ),
        migrations.AddField(
            model_name='basicpagesectionitem',
            name='vertical_padding',
            field=models.ForeignKey(help_text='The vertical space between the section and the content.', limit_choices_to={'category__title': 'VerticalPadding'}, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='general.Style'),
        ),
        migrations.AddField(
            model_name='basicpagecarouselitem',
            name='link_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='basicpagecarouselitem',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='carousel_items', to='general.BasicPage'),
        ),
        migrations.AlterUniqueTogether(
            name='style',
            unique_together={('title', 'category')},
        ),
    ]
